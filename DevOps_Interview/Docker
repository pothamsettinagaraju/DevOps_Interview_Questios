1. What is Docker and Docker deamon? 
   Docker is a tool and platform that uses container technology to create, deploy, and run applications.
   Containers: Containers are lightweight, portable, and self-sufficient units that package up an application and all its dependencies, including the runtime, libraries, and system tools.
   Images: Docker images are the read-only templates used to create containers. An image includes everything needed to run an application—code, runtime, libraries, and environment variables. Images can be shared via Docker Hub or other container registries.
   Docker Engine: The Docker Engine is the runtime that runs and manages containers. It includes both the client and server components:
    a. Docker Daemon: The background service that manages Docker containers.
    b. Docker CLI: The command-line interface used to interact with the Docker Daemon
   Dockerfile: A Dockerfile is a script with a set of instructions on how to build a Docker image. It includes commands to install software, set up configurations, and add files into the image.
   Docker Compose: A tool for defining and running multi-container Docker applications using a YAML file (docker-compose.yml). It simplifies the process of managing multi-container setups by allowing you to define services, networks, and volumes in a single file.
   Docker Hub: A cloud-based registry service where Docker images can be stored and shared. It provides a public repository for community-contributed images and a private repository for organizations.

   Docker Daemon (or Docker Engine) is the background service responsible for managing Docker containers, images, networks, and volumes on a host system. 
   It performs several key functions:
    1. Container Management: The Docker Daemon creates, starts, stops, and deletes containers. It ensures that containers are running as expected and manages their lifecycle.
    2. Image Management: It handles the pulling and pushing of Docker images to and from registries (like Docker Hub). The daemon ensures that the appropriate images are available on the host for creating and running containers.
    3. Networking: The Docker Daemon manages networking for containers, including setting up network interfaces and handling communication between containers.
    4. Volume Management: It manages Docker volumes, which are used to persist data generated and used by Docker containers.
    5. API: The Docker Daemon provides a REST API that can be used by other applications to interact with Docker. The Docker CLI communicates with the Docker Daemon through this API.

   How Docker and Docker Daemon Work Together?
   Client-Server Model: Docker follows a client-server architecture. 
   The Docker CLI (client) sends commands to the Docker Daemon (server). The daemon processes these commands and manages containers accordingly.

2. What is Docker swarm?
   Docker Swarm is a native clustering and orchestration tool for Docker that allows you to manage a group of Docker hosts (also known as nodes) as a single, virtual Docker host. It provides high availability, scaling, and load balancing for Docker containers in a distributed environment.

3. What are the build and run time commands?
   Build-time commands:
   we would be having multiple build time commands like: 
   RUN -> Which would be installing the packages inside the docker container. 
   COPY -> which sould be copying the files from the local to the docker image.
   ADD -> which would be again copying the files or else download the files from the public repository.
   EXPOSE: which would be exposing the port, 

   Run-time commands:
   I would be also having commands like: CMD and ENTRYPOINT
   which are runtime commands, which would be actually starting of a service

4. What is Docker volume and Volume mount?
   Docker volume is a storage mechanism used to persist data generated by and used by Docker containers. Volumes are managed by Docker and provide a way to store data outside of the container’s filesystem. This allows data to persist even if the container is removed or recreated.
   EX: Create docker volume: docker volume create <volume-name>
   Volume mount refers to the process of attaching a Docker volume or host directory to a container. When you mount a volume, you specify a path on the host (or within Docker's managed storage) and a path inside the container where the volume should be accessible.
   Ex:Mount a volume to container: docker run -d -v my-volume:/app/data my-image

5. What is the diff b/n CMD and ENTRYOINT?
   CMD and Entry point both are docker run time commands: Which should be actually starting of the service.
   CMD: we would be able to override the parameters which we have passed and inside. 
   ENTRYPOINT: we won't be override the values even though if you mention multiple entry points only the last point will be executed.

6. What is diff COPY and ADD?
   COPY and ADD are Build time commands: 
   COPY whoud be able to just copy the files from local to the remote.
   ADD: would be able to download the files and as well as the tarballs as well

7. Can you differantiate RUN and CMD?
   RUN is a built time command which would be installing packages in the docker container.
   CMD is runtime command which would be actually starting of the service inside the docker container, when we execute the docker run.

8. What is Export in docker?
   docker export is used to export the filesystem of a Docker container as a tarball (compressed archive). This tarball contains the contents of the container’s filesystem but does not include any metadata, such as environment variables, volumes, or the Docker image history.
   Filesystem Only: The export command does not include Docker image metadata or configuration details. It captures only the files and directories present in the container’s filesystem at the time of export.
   EX: docker export -o my-container.tar <container-id or name>
   means: This command exports the filesystem of the container with the specified <container-id or name> to a file named my-container.tar

9. Docker Commands?
   Build Commands: Use 'docker build' and docker buildx to create Docker images from Dockerfiles.
   Run Commands: Use 'docker run' to start containers from Docker images, with various options to manage container behavior.
   Management Commands: Use 'docker image' and 'docker container' commands to list, remove, and manage images and containers, respectively.
   Additional Tools: 'docker logs' and 'docker exec' help manage and troubleshoot running containers, while docker-compose simplifies managing multi-container applications.

   docker build -t <image-name>:<tag_name>
   To build a docker image and speficy image name and tag name

   docker ps
   list all the running containers

   docker ps -a
   list all the running/stopped containers

   docker ps -f status=running
   To list only running containers

   docker ps -f status=exited
   To list only stopped containers

   docker ps -f status=created
   To list containers that have been created but not started

docker inspect <container_id_or_name>
To get detailed information about a specific container, including its status, IP address, configuration, and more

docker logs <container_id_or_name>
To view the logs of a running container

-------------------------------------------------------------
optionals:
Common Options:

-d or --detach: Run the container in the background.
-p <host-port>:<container-port>: Map a port on the host to a port on the container.
-e <key>=<value>: Set environment variables inside the container.
-v <host-path>:<container-path>: Mount a volume from the host to the container.
--name <container-name>: Name the container.
--rm: Automatically remove the container when it exits
